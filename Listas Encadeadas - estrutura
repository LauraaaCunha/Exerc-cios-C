
#include <stdlib.h>
#include <stdio.h>

typedef struct{

    int info;
    struct Lista *prox;//endereço do prox nó;

}Lista;


Lista* cria_lista_vazia(void){ //aponta pra um nó do tipo lista vazio / retorna um endereço de memoria NULL
    return NULL;
}

 Lista* insere_lista(Lista* lista, int valor){ //tbm retornam ponteiro do tipo lista
    Lista*  novo = malloc(sizeof(Lista)); //aloca memoria dinamicamento - reserva memoria para armazenar o nó
    novo->info = valor;
    novo->prox = lista; //o prox elemento do novo no aponta pro mesmo endereço de memoria da lista antiga/primeiro - o 20
    return novo; //retorna endereço de memoria do novo nó pro main- a lista aponta pro novo nó e o novo nó pro 20
}

void imprime_lista(Lista* lista){
    Lista *p;
    for(p=lista; p!=NULL; p=p->prox){
        printf("info: %d \n ", p->info);//equivale a p.info, so que é ponteiro apontando para variavel tipo strct - se p fosse variavel normal seria .

    } //aponta pro primeiro elemento p=p->prox equivle ao endereço de memoria do proximo 20 e verifica o endereço do 20, se for NULL para a operação
}

int main(){

   Lista* lista; // ponteiro do tipo lista
   lista = cria_lista_vazia();
   lista = insere_lista(lista, 20);//atualiza o primeiro elemento da lista- insere valor
   lista = insere_lista(lista, 30);
   lista = insere_lista(lista, 5);
   imprime_lista(lista);
}
