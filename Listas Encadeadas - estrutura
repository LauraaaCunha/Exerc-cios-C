
#include <stdlib.h>
#include <stdio.h>

typedef struct{

    int info;
    struct Lista *prox;//endereço do prox nó;

}Lista;


Lista* cria_lista_vazia(void){ //aponta pra um nó do tipo lista vazio / retorna um endereço de memoria NULL
    return NULL;
}

 Lista* insere_lista(Lista* lista, int valor){ //tbm retornam ponteiro do tipo lista
    Lista*  novo = malloc(sizeof(Lista)); //aloca memoria dinamicamento - reserva memoria para armazenar o nó
    novo->info = valor;
    novo->prox = lista; //o prox elemento do novo no aponta pro mesmo endereço de memoria da lista antiga/primeiro - o 20
    return novo; //retorna endereço de memoria do novo nó pro main- a lista aponta pro novo nó e o novo nó pro 20
}

void imprime_lista(Lista* lista){
    Lista *p; //ponteiro temporario
    for(p=lista; p!=NULL; p=p->prox){
        printf("info: %d \n ", p->info);//equivale a p.info, so que é ponteiro apontando para variavel tipo strct - se p fosse variavel normal seria .

    } //aponta pro primeiro elemento p=p->prox equivle ao endereço de memoria do proximo 20 e verifica o endereço do 20, se for NULL para a operação
}

Lista* busca(Lista* lista, int valor){
    Lista *p;
    for(p=lista; p!=NULL; p=p->prox){
            if(p->info==valor){
                return p; //vai retornar o endereço de memoria do no q encontrei o valor
            }
    }
    return NULL;
}

Lista* remove_lista(Lista* lista, int valor){
      Lista *p = lista;
      Lista *ant = NULL;

      //procura elemento na lista guardando o anterior
      while(p!=NULL && p->info != valor){
        ant = p;
        p= p->prox;
      }
  if(p==NULL){
  return lista; //retorna lista original
  }

  //remove o elemento da lista
  if(ant == NULL){
    lista = p->prox;

  }else{//remove o elemento do meio da lista
      ant -> prox = p->prox;
  }

  free(p);
  return lista;

}

int main(){

   Lista* lista; // ponteiro do tipo lista
   lista = cria_lista_vazia();
   lista = insere_lista(lista, 20);//atualiza o primeiro elemento da lista- insere valor
   lista = insere_lista(lista, 30);
   lista = insere_lista(lista, 5);
   imprime_lista(lista);
   lista = remove_lista(lista, 30); //mostra o valor que qro remover da lista


   if(busca(lista,30)){ //se colocasse  if(busca(lista,20!=NULL)) seria redundante
   printf("VALOR ENCONTRADO ");
   } else{
   printf("valor não encontrado");
   }
}
